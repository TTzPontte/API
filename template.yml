AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Pontte API

Parameters:
  Project:
    Description: Project Name
    Type: String
    Default: API

  Environment:
    Description: Execution environment
    Type: String
    AllowedValues:
      - dev
      - test
      - staging
      - prod

Conditions:
  Prod: !Equals [!Ref Project, prod]

Globals:
  Function:
    Runtime: nodejs10.x
    MemorySize: 1024
    Timeout: 120
    Layers:
      - !Ref CommonAPILayer
    Tags:
      Project: !Ref Project
      Environment: !Ref Environment
    Environment:
      Variables:
        PROJECT: !Ref Project
        ENV: !Ref Environment

  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'Authorization,Content-Type,If-Match'"
      AllowOrigin: "'*'"

Conditions:
  Prod: !Equals [!Ref Environment, prod]

Resources:
  APIDomainName:
    Type: "AWS::ApiGateway::DomainName"
    Properties:
      DomainName:
        !If [Prod, "api.pontte.com.br", !Sub "api${Environment}.pontte.com.br"]
      CertificateArn: "arn:aws:acm:us-east-1:848638426587:certificate/639f5ab2-c77a-4f62-8250-c85716a6753f"

  CommonAPILayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: Common libraries
      ContentUri: src/layers/common
      CompatibleRuntimes:
        - nodejs10.x

  ApiAuditLogApp:
    Type: AWS::Serverless::Application
    Properties:
      Location: src/audit/template.yaml
      Parameters:
        Project: !Ref Project
        Environment: !Ref Environment

  DBClients:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'ClientsApi.${Environment}'
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [Prod, true, false]
      SSESpecification:
        SSEEnabled: true
      AttributeDefinitions:
        - AttributeName: clientId
          AttributeType: S
      KeySchema:
        - AttributeName: clientId
          KeyType: HASH
      Tags:
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }

  SimulationHelloApiFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "SimulationHelloApiFn-${Environment}"
      Description: Save the simulations done from partners
      CodeUri: src/simulation
      Handler: hello.handler
      Tracing: Active
      Events:
        api1:
          Type: Api
          Properties:
            Path: "/v1/simulation"
            Method: GET

  SimulationSaveApiFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "SimulationSaveApiFn-${Environment}"
      Description: Save the simulations done from partners
      CodeUri: src/simulation
      Handler: simulation.handler
      Tracing: Active
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !Sub "ApiAuditLog_${Environment}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "Simulations.${Environment}"
        - DynamoDBCrudPolicy:
            TableName: !Ref DBClients
        - LambdaInvokePolicy:
            FunctionName: !Sub 'SimulatorCalculatorFn-${Environment}'
      Events:
        api1:
          Type: Api
          Properties:
            Path: "/v1/simulation"
            Method: POST
